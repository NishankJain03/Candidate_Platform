{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nishank Lalit Jain\\\\OneDrive\\\\Desktop\\\\New folder\\\\candidateplatform\\\\src\\\\Components\\\\JobList\\\\JobList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport JobCard from '../JobCard/JobCard';\nimport './JobList.css'; // Import the CSS file for JobList component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction JobList() {\n  _s();\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n  const observer = useRef();\n  const fetchJobs = () => {\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    const requestOptions = {\n      method: \"POST\",\n      headers: myHeaders\n    };\n    fetch(`https://api.weekday.technology/adhoc/getSampleJdJSON?page=${page}`, requestOptions).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch job data');\n      }\n      return response.json();\n    }).then(json => {\n      setData(prevData => [...prevData, ...json.jdList]);\n      setHasMore(json.jdList.length > 0);\n      setLoading(false);\n      setPage(prevPage => prevPage + 1);\n    }).catch(error => setError(error.message));\n  };\n  useEffect(() => {\n    fetchJobs();\n  }, []);\n  useEffect(() => {\n    if (!loading && hasMore) {\n      const observerOptions = {\n        root: null,\n        rootMargin: '0px',\n        threshold: 0.1\n      };\n      observer.current = new IntersectionObserver(entries => {\n        if (entries[0].isIntersecting) {\n          fetchJobs();\n        }\n      }, observerOptions);\n      if (observer.current) {\n        observer.current.observe(document.querySelector('.observer-element'));\n      }\n    }\n    return () => {\n      if (observer.current) {\n        observer.current.disconnect();\n      }\n    };\n  }, [loading, hasMore]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"job-list-container\",\n    children: [data.map((job, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(JobCard, {\n        job: job\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), index === data.length - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"observer-element\",\n        style: {\n          height: '10px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)]\n    }, job.jdUid, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 19\n    }, this), !loading && !hasMore && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No more jobs to load\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 32\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(JobList, \"7CZM1APkRH4WbCGMATsgcztOKIU=\");\n_c = JobList;\nexport default JobList;\nvar _c;\n$RefreshReg$(_c, \"JobList\");","map":{"version":3,"names":["React","useState","useEffect","useRef","JobCard","jsxDEV","_jsxDEV","JobList","_s","data","setData","error","setError","loading","setLoading","page","setPage","hasMore","setHasMore","observer","fetchJobs","myHeaders","Headers","append","requestOptions","method","headers","fetch","then","response","ok","Error","json","prevData","jdList","length","prevPage","catch","message","observerOptions","root","rootMargin","threshold","current","IntersectionObserver","entries","isIntersecting","observe","document","querySelector","disconnect","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","job","index","Fragment","style","height","jdUid","_c","$RefreshReg$"],"sources":["C:/Users/Nishank Lalit Jain/OneDrive/Desktop/New folder/candidateplatform/src/Components/JobList/JobList.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport JobCard from '../JobCard/JobCard';\r\nimport './JobList.css'; // Import the CSS file for JobList component\r\n\r\nfunction JobList() {\r\n  const [data, setData] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [page, setPage] = useState(1);\r\n  const [hasMore, setHasMore] = useState(true);\r\n  const observer = useRef();\r\n\r\n  const fetchJobs = () => {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n    };\r\n\r\n    fetch(`https://api.weekday.technology/adhoc/getSampleJdJSON?page=${page}`, requestOptions)\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch job data');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(json => {\r\n        setData(prevData => [...prevData, ...json.jdList]);\r\n        setHasMore(json.jdList.length > 0);\r\n        setLoading(false);\r\n        setPage(prevPage => prevPage + 1);\r\n      })\r\n      .catch(error => setError(error.message));\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchJobs();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!loading && hasMore) {\r\n      const observerOptions = {\r\n        root: null,\r\n        rootMargin: '0px',\r\n        threshold: 0.1,\r\n      };\r\n\r\n      observer.current = new IntersectionObserver(entries => {\r\n        if (entries[0].isIntersecting) {\r\n          fetchJobs();\r\n        }\r\n      }, observerOptions);\r\n\r\n      if (observer.current) {\r\n        observer.current.observe(document.querySelector('.observer-element'));\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      if (observer.current) {\r\n        observer.current.disconnect();\r\n      }\r\n    };\r\n  }, [loading, hasMore]);\r\n\r\n  if (error) {\r\n    return <div>Error: {error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"job-list-container\">\r\n      {data.map((job, index) => (\r\n        <React.Fragment key={job.jdUid}>\r\n          <JobCard job={job} />\r\n          {index === data.length - 1 && (\r\n            <div className=\"observer-element\" style={{ height: '10px' }} />\r\n          )}\r\n        </React.Fragment>\r\n      ))}\r\n      {loading && <div>Loading...</div>}\r\n      {!loading && !hasMore && <div>No more jobs to load</div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JobList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}